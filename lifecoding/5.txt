<Header></Header>
<Nav></Nav>
<Article></Article>

<img src="./image.jpg" width="100" height="100"/>

이렇게 만든 컴포넌트들과 img라는 html태그가 있다.
그런데 이 html태그에는 컴포넌트들과는 다른 요소를 갖고 있다. 
=> src -> src가 뭐냐에 따라서 이미지가 달라진다.
   width -> width가 뭐냐에 따라서 이미지 크기가 달라진다.
   height -> height가 뭐냐에 따라서 이미지 높이가 달라진다.

즉, src, width, height와 같은 속성들 덕분에 이미지태그는 입력 값을 가질 수 있게 된다. 

그럼 컴포넌트들도 저렇게 속성을 가질 수 있다면 얼마나 좋을까?
< 리액트는 속성을 PROP이라고 부른다 >
< 5. props > 에서 어떻게 내가 만든 컴포넌트에 prop을 장착할 수 있는가를 살펴볼거다

-------------------------------------------------------

function Header(props) {
   =>  Header에 첫번째 파라미터로 props라고 이름을 붙였다(아무거나 적어도 되지만 가장 대중적인걸로)

  console.log("props", props);
    => props ▶︎ Objec =>  props에는 객체가 들어오는데 이 객체에는 title이 React다 라고 되어있다.(title: "React")
  return (
    <header>
      <h1>
        <a href="/">WEB</a>
      </h1>
    </header>
  );
}

function App() {
  return (
    <div>
      <Header title="React"></Header>
      <Nav></Nav>
      <Article></Article>
    </div>
  );
}


---------------------------------------------------
그렇다면 밑에 했던 react라는 텍스트를 얻어내려면 어떻게 해야할까?
👇🏻 props에 title이라고 하면된다 => props.title


function Header(props) {
  console.log("props", props, props.title);
    => props {title: 'React'} React 
     => React가 출력된다.

  return (
    <header>
      <h1>
        <a href="/">WEB</a>
      </h1>
    </header>
  );
}


---------------------------------------------------
👇🏻 그렇다면 props.title을 내용으로 출력하고 싶다면
return값에 들어가는 구문에 {} 중괄호를 해주면 된다.


function Header(props) {
  console.log("props", props, props.title);
  return (
    <header>
      <h1>
        <a href="/">{props.title}</a>
      </h1>
    </header>
  );
}

=> {} 중괄호와 중괄호 사이에 있는 정보는 일반적인 문자열이 아니라 표현식으로 취급되기 때문에 저기에 있는 내용이 해석되서 그것이 이렇게 반영되는 것이다.


---------------------------------------------------
👇🏻 만약, <Article title="Welcome" body="Hello, WEB"></Article> 이 내용이 직접 반영되게 하려면 어떻게 해야될까?


function Article(props) {
  return (
    <article>
      <h2>{props.title}</h2>
      {props.body}
    </article>
  );
}

function App() {
  return (
    <div>
      <Header title="React"></Header>
      <Nav></Nav>
      <Article title="Welcome" body="Hello, WEB"></Article>
    </div>
  );
}


---------------------------------------------------
👇🏻 Article이 언제나 똑같이 동작하는 것이 아니라 바꾸면 바꾼 값이 적용된다.
두개의 Article이 다른 내용을 출력하게된다.


function Article(props) {
  return (
    <article>
      <h2>{props.title}</h2>
      {props.body}
    </article>
  );
}

function App() {
  return (
    <div>
      <Header title="React"></Header>
      <Nav></Nav>
      <Article title="Welcome" body="Hello, WEB"></Article>
      <Article title="Hi" body="Hello, React"></Article>
    </div>
  );
}

======================================================
Nav에 목록이 있다.
목록을 내부에 하드 코딩 하는게 아니라 
내부로 props를 줘서 props에 주입된값에 따라서 li를 만들게 변형 


function Nav(props) {
  const lis = [
    <li>
      <a href="/read/1">html</a>
    </li>,
    <li>
      <a href="/read/2">css</a>
    </li>,
    <li>
      <a href="/read/3">js</a>
    </li>,
  ];
  
   👆🏻이 배열에 있는 내용들을 <nav>에 <ol>에 풀어놓으려면 어떻게 해야하나?

  return (
    <nav>
      <ol></ol>
    </nav>
  );
}

function App() {
  const topics = [
     => li정보들이 여러개니까 배열에 담은거다 / 그리고 각각의 정보는 제목과 본문이 있다. / 그리고 각자의 id값이 있을거다 
     => 이런 정보는 객체에 담는다
    { id: 1, title: "html", body: "html is..." },
    { id: 2, title: "css", body: "css is..." },
    { id: 3, title: "js", body: "js is..." },
  ];

  return (
    <div>
      <Header title="WEB"></Header>
      <Nav topics={topics}>
        -> topics={topics}  =>  topics를 Nav의 prop으로 전달 
        -> topics="topics" =>  이렇게 하면 단순한 문자열이 전달된다.
         => 그래서 있는 그대로의 데이터로 전달하기 위해 => {topics}
      </Nav>
      <Article title="Welcome" body="Hello, WEB"></Article>
    </div>
  );
}


---------------------------------------------------
👇🏻 function Nav(props) {
  const lis = []
  return (
    <nav>
      <ol></ol>
    </nav>
  );
}
   👆🏻lis 배열에 있는 내용들을 <nav>에 <ol>에 풀어놓으려면 어떻게 해야하나?

return (
  <nav>
    <ol>{lis}</ol>
      => 배열을 이렇게 가져다주면 리액트에 의해서 lis 배열의 원소들을 하나씩 꺼내서 여기에 배치시켜준다.
  </nav>
);


---------------------------------------------------
👇🏻 topics로 전달된 값을 받아서 ol안에 태그를 만들어서 배열에 담아주면된다.
여러가지 방법이 있다. map도 있지만 어려워서 for문으로

function Nav(props) {
  const lis = [];

  for (let i = 0; i < props.topics.length; i++) {
    // ttopics의 원소의 갯수만큼 반복될거다
    let t = props.topics[i];
    lis.push(
      <li>
        <a href={`/read` + t.id}>{t.title}</a>
         => href는 동적으로 바뀌어야기 때문에 {} 중괄호 사용
      </li>
    );
  }
  return (
    <nav>
      <ol>{lis}</ol>
    </nav>
  );
}


---------------------------------------------------
👇🏻 console창에 'App5.js:30 Warning: Each child in a list should have a unique "key" prop.'라는 경고문이 떴다.
 => 리스트의 각 항목이 고유한 key 프로퍼티를 가져야 한다는 것을 의미합니다. 이 경고는 리스트를 렌더링할 때 효율적인 업데이트와 성능을 보장하기 위해 필요합니다.
 => 각각의 li 태그는 즉, 동적으로 만들어주는 li태그들은 각자 key라고 하는 prop을 가지고 있어야 되고 그 key라는 prop의 값은 그 반복문 안에서 unique해야된다.

 function Nav(props) {
  const lis = [];

  for (let i = 0; i < props.topics.length; i++) {
    let t = props.topics[i];
    lis.push(
      <li key={t.id}>
        => key={t.id} -> 이 값은 고유해야된다 / 애플리케이션 전체가 아니라 이 반복문안에서 고유해야된다는 거다. 
        <a href={`/read` + t.id}>{t.title}</a>
      </li>
    );
  }
  return (
    <nav>
      <ol>{lis}</ol>
    </nav>
  );
}


---------------------------------------------------
👇🏻 console창에 'App5.js:30 Warning: Each child in a list should have a unique "key" prop.'라는 경고문이 떴다.
 => 리스트의 각 항목이 고유한 key 프로퍼티를 가져야 한다는 것을 의미합니다. 이 경고는 리스트를 렌더링할 때 효율적인 업데이트와 성능을 보장하기 위해 필요합니다.
 => 각각의 li 태그는 즉, 동적으로 만들어주는 li태그들은 각자 key라고 하는 prop을 가지고 있어야 되고 그 key라는 prop의 값은 그 반복문 안에서 unique해야된다.